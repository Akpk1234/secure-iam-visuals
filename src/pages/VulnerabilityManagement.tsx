import React, { useState, useEffect } from 'react';
import { Bug, Eye, Edit, Trash2, Plus, Search, Filter, TrendingUp, Shield, AlertCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Progress } from '@/components/ui/progress';
import { PersistentStorage } from '@/lib/storage';

const VulnerabilityManagement = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [severityFilter, setSeverityFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  
  const defaultVulnerabilities = [
    {
      id: 1,
      title: 'SQL Injection in User Registration',
      description: 'SQL injection vulnerability found in user registration form allowing potential data breach',
      severity: 'Critical',
      cvssScore: 9.3,
      status: 'Open',
      discoveredDate: '2024-01-15',
      asset: 'Web Application',
      component: 'User Registration Module',
      remediation: 'Implement parameterized queries and input validation',
      assignedTo: 'James Wilson',
      dueDate: '2024-01-22',
      category: 'Injection',
      exploitability: 'High',
      impact: 'High'
    },
    {
      id: 2,
      title: 'Cross-Site Scripting (XSS) in Comments',
      description: 'Reflected XSS vulnerability in comment system allows script execution',
      severity: 'High',
      cvssScore: 7.4,
      status: 'In Progress',
      discoveredDate: '2024-01-10',
      asset: 'Web Application',
      component: 'Comment System',
      remediation: 'Implement output encoding and content security policy',
      assignedTo: 'Daniel Rodriguez',
      dueDate: '2024-01-20',
      category: 'XSS',
      exploitability: 'Medium',
      impact: 'Medium'
    },
    {
      id: 3,
      title: 'Weak Password Policy',
      description: 'System allows weak passwords that can be easily compromised',
      severity: 'Medium',
      cvssScore: 5.3,
      status: 'Fixed',
      discoveredDate: '2024-01-05',
      asset: 'Authentication System',
      component: 'Password Validation',
      remediation: 'Enforce strong password requirements and implement password complexity rules',
      assignedTo: 'Emily Chen',
      dueDate: '2024-01-15',
      category: 'Authentication',
      exploitability: 'Low',
      impact: 'Medium'
    },
    {
      id: 4,
      title: 'Unencrypted Data Transmission',
      description: 'Sensitive data transmitted without proper encryption over network',
      severity: 'High',
      cvssScore: 8.1,
      status: 'Open',
      discoveredDate: '2024-01-12',
      asset: 'Network Infrastructure',
      component: 'Data Transmission Layer',
      remediation: 'Implement TLS encryption for all data transmission',
      assignedTo: 'Thomas Lee',
      dueDate: '2024-01-25',
      category: 'Cryptography',
      exploitability: 'Medium',
      impact: 'High'
    },
    {
      id: 5,
      title: 'Directory Traversal Vulnerability',
      description: 'Path traversal vulnerability allowing access to system files',
      severity: 'High',
      cvssScore: 7.8,
      status: 'In Progress',
      discoveredDate: '2024-01-08',
      asset: 'File Management System',
      component: 'File Upload Handler',
      remediation: 'Validate and sanitize file paths, implement access controls',
      assignedTo: 'Rachel Kim',
      dueDate: '2024-01-18',
      category: 'Path Traversal',
      exploitability: 'Medium',
      impact: 'High'
    },
    {
      id: 6,
      title: 'Outdated Third-Party Libraries',
      description: 'Multiple third-party libraries contain known security vulnerabilities',
      severity: 'Medium',
      cvssScore: 6.1,
      status: 'Open',
      discoveredDate: '2024-01-14',
      asset: 'Application Dependencies',
      component: 'External Libraries',
      remediation: 'Update all third-party libraries to latest secure versions',
      assignedTo: 'Alex Kumar',
      dueDate: '2024-01-28',
      category: 'Component Vulnerability',
      exploitability: 'Low',
      impact: 'Medium'
    },
    {
      id: 7,
      title: 'Insecure Direct Object Reference',
      description: 'Users can access other users\' data by modifying object references',
      severity: 'High',
      cvssScore: 8.5,
      status: 'Fixed',
      discoveredDate: '2024-01-06',
      asset: 'Web Application',
      component: 'API Endpoints',
      remediation: 'Implement proper authorization checks for object access',
      assignedTo: 'Sophie Martin',
      dueDate: '2024-01-16',
      category: 'Access Control',
      exploitability: 'High',
      impact: 'High'
    }
  ];

  const [vulnerabilities, setVulnerabilities] = useState(PersistentStorage.load('vulnerabilities', defaultVulnerabilities));

  useEffect(() => {
    PersistentStorage.save('vulnerabilities', vulnerabilities);
  }, [vulnerabilities]);

  const handleDelete = (vulnId: number) => {
    if (confirm('Are you sure you want to delete this vulnerability?')) {
      setVulnerabilities(vulnerabilities.filter(vuln => vuln.id !== vulnId));
    }
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.category.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesSeverity = severityFilter === 'all' || vuln.severity === severityFilter;
    const matchesStatus = statusFilter === 'all' || vuln.status === statusFilter;
    return matchesSearch && matchesSeverity && matchesStatus;
  });

  const getSeverityVariant = (severity: string) => {
    switch (severity) {
      case 'Critical': return 'destructive';
      case 'High': return 'default';
      case 'Medium': return 'secondary';
      case 'Low': return 'outline';
      default: return 'outline';
    }
  };

  const getStatusVariant = (status: string) => {
    switch (status) {
      case 'Fixed': return 'default';
      case 'In Progress': return 'secondary';
      case 'Open': return 'destructive';
      default: return 'outline';
    }
  };

  const getCvssColor = (score: number) => {
    if (score >= 9.0) return 'text-red-600';
    if (score >= 7.0) return 'text-orange-600';
    if (score >= 4.0) return 'text-yellow-600';
    return 'text-green-600';
  };

  const stats = {
    total: vulnerabilities.length,
    critical: vulnerabilities.filter(v => v.severity === 'Critical').length,
    high: vulnerabilities.filter(v => v.severity === 'High').length,
    open: vulnerabilities.filter(v => v.status === 'Open').length,
    fixed: vulnerabilities.filter(v => v.status === 'Fixed').length
  };

  const fixedPercentage = Math.round((stats.fixed / stats.total) * 100);

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold text-gray-900">Vulnerability Management</h1>
        <Button className="flex items-center space-x-2">
          <Plus className="h-4 w-4" />
          <span>Add Vulnerability</span>
        </Button>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Vulnerabilities</p>
                <p className="text-2xl font-bold text-gray-900">{stats.total}</p>
              </div>
              <Bug className="h-8 w-8 text-blue-600" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Critical</p>
                <p className="text-2xl font-bold text-red-600">{stats.critical}</p>
              </div>
              <AlertCircle className="h-8 w-8 text-red-600" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">High Severity</p>
                <p className="text-2xl font-bold text-orange-600">{stats.high}</p>
              </div>
              <TrendingUp className="h-8 w-8 text-orange-600" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Open Issues</p>
                <p className="text-2xl font-bold text-red-600">{stats.open}</p>
              </div>
              <Shield className="h-8 w-8 text-red-600" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <p className="text-sm font-medium text-gray-600">Resolution Rate</p>
                <p className="text-sm font-bold text-gray-900">{fixedPercentage}%</p>
              </div>
              <Progress value={fixedPercentage} className="h-2" />
              <p className="text-xs text-gray-500">{stats.fixed} of {stats.total} fixed</p>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Search and Filter */}
      <Card>
        <CardContent className="p-6">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <Input
                placeholder="Search vulnerabilities..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <div className="flex items-center space-x-2">
              <Filter className="h-4 w-4 text-gray-500" />
              <Select value={severityFilter} onValueChange={setSeverityFilter}>
                <SelectTrigger className="w-40">
                  <SelectValue placeholder="Severity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Severity</SelectItem>
                  <SelectItem value="Critical">Critical</SelectItem>
                  <SelectItem value="High">High</SelectItem>
                  <SelectItem value="Medium">Medium</SelectItem>
                  <SelectItem value="Low">Low</SelectItem>
                </SelectContent>
              </Select>
              <Select value={statusFilter} onValueChange={setStatusFilter}>
                <SelectTrigger className="w-40">
                  <SelectValue placeholder="Status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Status</SelectItem>
                  <SelectItem value="Open">Open</SelectItem>
                  <SelectItem value="In Progress">In Progress</SelectItem>
                  <SelectItem value="Fixed">Fixed</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Vulnerabilities Table */}
      <Card>
        <CardHeader>
          <CardTitle>Vulnerabilities ({filteredVulnerabilities.length})</CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 border-b">
                <tr>
                  <th className="text-left py-3 px-6 font-medium text-gray-500 text-sm">Vulnerability</th>
                  <th className="text-left py-3 px-6 font-medium text-gray-500 text-sm">Severity</th>
                  <th className="text-left py-3 px-6 font-medium text-gray-500 text-sm">CVSS Score</th>
                  <th className="text-left py-3 px-6 font-medium text-gray-500 text-sm">Status</th>
                  <th className="text-left py-3 px-6 font-medium text-gray-500 text-sm">Asset</th>
                  <th className="text-left py-3 px-6 font-medium text-gray-500 text-sm">Assigned To</th>
                  <th className="text-left py-3 px-6 font-medium text-gray-500 text-sm">Due Date</th>
                  <th className="text-left py-3 px-6 font-medium text-gray-500 text-sm">Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredVulnerabilities.map((vuln) => (
                  <tr key={vuln.id} className="border-b hover:bg-gray-50">
                    <td className="py-4 px-6">
                      <div>
                        <div className="font-medium text-gray-900">{vuln.title}</div>
                        <div className="text-sm text-gray-500 line-clamp-2">{vuln.description}</div>
                        <div className="flex items-center space-x-2 mt-1">
                          <Badge variant="outline" className="text-xs">{vuln.category}</Badge>
                        </div>
                      </div>
                    </td>
                    <td className="py-4 px-6">
                      <Badge variant={getSeverityVariant(vuln.severity)}>
                        {vuln.severity}
                      </Badge>
                    </td>
                    <td className="py-4 px-6">
                      <div className={`font-bold ${getCvssColor(vuln.cvssScore)}`}>
                        {vuln.cvssScore}
                      </div>
                    </td>
                    <td className="py-4 px-6">
                      <Badge variant={getStatusVariant(vuln.status)}>
                        {vuln.status}
                      </Badge>
                    </td>
                    <td className="py-4 px-6">
                      <div>
                        <div className="text-sm font-medium text-gray-900">{vuln.asset}</div>
                        <div className="text-xs text-gray-500">{vuln.component}</div>
                      </div>
                    </td>
                    <td className="py-4 px-6 text-sm text-gray-600">{vuln.assignedTo}</td>
                    <td className="py-4 px-6 text-sm text-gray-600">{vuln.dueDate}</td>
                    <td className="py-4 px-6">
                      <div className="flex items-center space-x-2">
                        <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                          <Eye className="h-4 w-4" />
                        </Button>
                        <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="h-8 w-8 p-0 text-red-600 hover:text-red-700"
                          onClick={() => handleDelete(vuln.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default VulnerabilityManagement;